Modes:
	default: 
		reinstalls non-interactively with no delays, logouts, or reboots
			`run_esp_cmd`

	test:
		tests the script. very fast. minimal actions taken. no reinstall is done
			`run_esp_cmd test`
			`run_esp_cmd t`

	retool:
	    reinstalls bins and export.sh, nothing else
		    `run_esp_cmd retool`
			`run_esp_cmd rt`

	cron:
		runs noninteractively with forced user logout and automatic reboot, plus delays
		    `run_esp_cmd cron`
			`run_esp_cmd c`

	update:
		updates and installs latest without reboot or user logout
			`run_esp_cmd update`
			`run_esp_cmd u`

	interactive:
		interactively installs/reinstalls esp-idf
		    `run_esp_cmd interactive`
			`run_esp_cmd i`

	nuke:
		full delete and re-download and install
			`run_esp_cmd nuke`
			`run_esp_cmd n`

	clearlogs:
		clear logs
			`run_esp_cmd clearlogs`
			`run_esp_cmd clear`
			`run_esp_cmd clean`
			`run_esp_cmd cl`

    help:
        display this help text
            `run_esp_cmd help`
			`run_esp_cmd h`
			`run_esp_cmd -h`
			`run_esp_cmd --help`

	uninstall:
		uninstall esp-idf
			`run_esp_cmd uninstall`


Usage:
	Once installed for the first time, restart your shell.
	to activate esp-idf with the custom additions, run:
		`get_esp_tools`
	exit with
		`exit_esp_tools`
	for help
		`help_esp_tools`


Features:
	`help-esp` show this help
	`get_idf` enter esp-idf
	`exit_idf` exit esp-idf and reset terminal
	`build` idf.py build  
	`changebaud` prompts to enter a new baud  
	`changeesp` prompts to type in esp32s3, esp32c6, etc  
	`changeport` opens a menu to select a serial port  
	`clean` idf.py clean  
	`fullclean` fully resets a project, 'idf.py fullclean' plus remove the build dir and delete some temp and backup files  
	`rebuildfull` does a `fullclean` but also an `erase-flash` and also `setup`  
	`setup` same as running `idf.py set-target $ESPTARGET; idf.py menuconfig; idf.py build`  
	`flash` idf.py flash  
	`monitor` idf.py monitor  
	`erase-flash` idf.py erase-flash  
	`save-defconfig` idf.py save-defconfig  
	`step-flash-monitor` attempt clean, build, flash, then monitor, dying on error  
	`imagesize` get binary size, broken down in various ways including total, by componant, and by file
	`chipinfo` get information from the esp chip
	`espinfo` get detailed information from the esp chip
	`menuconfig` run `idf.py menuconfig`
	

Aliases:
	run_esp_cmd
		Updates the esp-install-custom code via git, displays the script version, then executes esp-idf-tools-cmd.sh with optional arument.
		Takes identical arguments to running esp-idf-tools-cmd.sh manually
			run_esp_cmd
			run_esp_cmd clean
			run_esp_cmd nuke [branch]
			run_esp_cmd retool [branch]
			run_esp_cmd cron [branch]
			run_esp_cmd update [branch]
			run_esp_cmd interactive
			run_esp_cmd test
			run_esp_cmd uninstall
		Second optional argument specifies branch (requires two arguments!):
			`run_esp_cmd nuke v5.4.1`

	esp_install_monitor
		monitors install.log
		alias for tail -n 75 -f $ESPIDF_INSTALLDIR/install.log
		no arguments

	esp_install_logs
		displays full text of install.log and version-data.txt
		no arguments

Helpful Stuff:
	cron:
	    reinstall from master everyday at 4am, logging out users with warn delays and rebooting after
		    `crontab -e`
		add below to bottom of file:
		    0 4 * * * bash $HOME/esp/esp-install-custom/esp-idf-tools-cmd.sh cron

	monitor log file during install:
		`tail -n 75 $ESPIDF_INSTALLDIR/install.log;`

	view both logs from beginning:
		`less $ESPIDF_INSTALLDIR/install.log; less $ESPIDF_INSTALLDIR/version-data.txt`
